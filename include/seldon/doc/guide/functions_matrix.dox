/*! \file functions_matrix.dox
    \brief Functions for Matrices.
*/

/*!
\page functions_matrix Functions for Matrices

<p> In that page, we detail functions that are not related to
<a href="functions_lapack.php">Lapack</a> </p>

<table class="category-table">
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#Transpose">Transpose </a></td> 
 <td class="category-table-td"> replaces a matrix by its transpose
 </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#Transpose">TransposeConj </a></td> 
 <td class="category-table-td"> replaces a matrix by its conjugate transpose
 </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#SetRow">SetRow </a></td> 
 <td class="category-table-td"> modifies a row of the matrix </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#GetRow">GetRow </a></td> 
 <td class="category-table-td"> extracts a row from the matrix</td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#SetCol">SetCol </a></td> 
 <td class="category-table-td"> modifies a column of the matrix </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#GetCol">GetCol </a></td> 
 <td class="category-table-td"> extracts a column from the matrix
 </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#MaxAbs">MaxAbs </a></td> 
 <td class="category-table-td"> returns highest absolute value of A
 </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#Norm1">Norm1 </a></td> 
 <td class="category-table-td"> returns 1-norm of A
 </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#NormInf">NormInf </a></td> 
 <td class="category-table-td"> returns infinity-norm of A </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#ApplyPermutation">ApplyPermutation </a></td> 
 <td class="category-table-td"> permutes row and column numbers of a matrix </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#ApplyPermutation">ApplyInversePermutation </a></td> 
 <td class="category-table-td"> permutes row and column numbers of a matrix </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#ScaleMatrix">ScaleMatrix </a></td> 
 <td class="category-table-td"> multiplies rows and columns of a matrix by coefficients </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#ScaleLeftMatrix">ScaleLeftMatrix </a></td> 
 <td class="category-table-td"> multiplies rows of a matrix by coefficients</td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#ScaleRightMatrix">ScaleRightMatrix </a></td> 
 <td class="category-table-td"> multiplies columns of a matrix by coefficients</td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#Copy">Copy </a></td> 
 <td class="category-table-td"> copies a sparse matrix into another one (conversion of format if needed) </td> </tr> 
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#ConvertMatrix_to_Coordinates">ConvertMatrix_to_Coordinates </a></td> 
 <td class="category-table-td">conversion of a sparse matrix into coordinates format </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#ConvertMatrix_from_Coordinates">ConvertMatrix_from_Coordinates </a></td> 
 <td class="category-table-td"> conversion of a matrix given as a triplet (i, j, val) to a sparse matrix </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#ConvertToCSC">ConvertToCSC </a></td> 
 <td class="category-table-td"> converts a sparse matrix to CSC (Compressed Sparse Column) format </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#ConvertToCSR">ConvertToCSR </a></td> 
 <td class="category-table-td"> converts a sparse matrix to CSR (Compressed Sparse Row) format </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#GetSymmetricPattern">GetSymmetricPattern </a></td> 
 <td class="category-table-td"> computes the sparsity pattern of A + A' </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#ConvertToSparse">ConvertToSparse </a></td> 
 <td class="category-table-td"> converts dense matrices to sparse matrices by specifying a threshold. </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#Gauss">Gauss </a></td> 
 <td class="category-table-td"> basic Gauss pivoting for dense matrices. </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#GaussSeidel">GaussSeidel </a></td> 
 <td class="category-table-td"> performs a Gauss-Seidel iteration for dense matrices. </td> </tr>
 <tr class="category-table-tr-1">
 <td class="category-table-td"><a href="iterative.php#SOR">SOR</a></td> 
 <td class="category-table-td"> applies successive over-relaxations to matrix</td> </tr>
 <tr class="category-table-tr-2">
 <td class="category-table-td"><a href="iterative.php#solvers">Cg, Gmres, BiCgSTAB, etc</a></td> 
 <td class="category-table-td"> solves iteratively a linear system</td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#IsComplexMatrix">IsComplexMatrix </a></td> 
 <td class="category-table-td"> returns true if the matrix is complex </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#IsSymmetricMatrix">IsSymmetricMatrix </a></td> 
 <td class="category-table-td"> returns true if the matrix is symmetric </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#GetLowerTriangular">GetLowerTriangular </a></td> 
 <td class="category-table-td"> extracts lower triangular part of a matrix </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#GetUpperTriangular"> GetUpperTriangular </a></td> 
 <td class="category-table-td"> extracts upper triangular part of a matrix </td> </tr>
 <tr class="category-table-tr-1">
 <td class="category-table-td"><a href="#ReadCoordinateMatrix">ReadCoordinateMatrix</a></td> 
 <td class="category-table-td"> reads a matrix in coordinate format (as in Matlab) </td> </tr>
 <tr class="category-table-tr-2">
 <td class="category-table-td"><a href="#WriteCoordinateMatrix">WriteCoordinateMatrix</a></td> 
 <td class="category-table-td"> writes a matrix in coordinate format (as in Matlab) </td> </tr>
</table>



<div class="separator"><a name="Transpose"></a></div>



<h3>Transpose, TransposeConj</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Transpose(Matrix&amp;);
  void Transpose(const Matrix&amp;, Matrix&amp;);
  void TransposeConj(Matrix&amp;);
  void TransposeConj(const Matrix&amp;, Matrix&amp;);
</pre>


<p><code>Transpose</code> overwrites a matrix by its transpose, while <code>TransposeConj</code> overwrites a matrix by its conjugate transpose. You can also compute the tranpose (or conjugate transpose) and copy this transpose into another matrix.</p>


<h4> Example : </h4>
\precode
Matrix<double> A(5, 5);
A.Fill();

Transpose(A);

Matrix<complex<double> > B(5, 5);
// you fill B as you want, then overwrites it by conj(transpose(B))
TransposeConj(B);

// You can keep the original matrix
Matrix<double, General, ArrayRowSparse> As, Atrans;
// the original matrix As is constructed then
Transpose(As, Atrans);
// Atrans contains now the transpose of As

Matrix<complex<double>, General, RowSparse> Bs Btrans;
// the original matrix Bs is constructed then
TransposeConj(As, Atrans);
// Btrans contains now the conjugate transpose of Bs

\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="SetRow"></a></div>



<h3>SetRow</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void SetRow(const Vector&amp;, int, Matrix&amp;);
</pre>


<p>This function modifies a row in the provided matrix. For sparse matrices, the expected vector is sparse. </p>


<h4> Example : </h4>
\precode
Matrix<double> A(5, 5);
A.Fill();

// now you construct a row
Vector<double> row(5);
row.FillRand();

// and you put it in A
int irow = 1;
SetRow(row, irow, A);

// For sparse matrices the row is sparse
Matrix<double, General, ArrayRowSparse> B(10, 10);
Vector<double, VectSparse> row_sparse(2);
row_sparse.Index(0) = 2; row_sparse.Value(0) = 1.2;
row_sparse.Index(1) = 7; row_sparse.Value(1) = 2.4;

// setting a row of B
SetRow(row_sparse, irow, B);

\endprecode


<h4>Location :</h4>
<p>Functions.cxx</p>



<div class="separator"><a name="GetRow"></a></div>



<h3>GetRow</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void GetRow(const Matrix&amp;, int, Vector&amp;);
</pre>


<p>This function extracts a row from the provided matrix. For sparse matrices, the extracted vector is
 a sparse vector.</p>


<h4> Example : </h4>
\precode
Matrix<double> A(5, 5);
A.Fill();

// now you extract the first row
Vector<double> row;
GetRow(A, 0, row);

// For sparse matrices, declare a sparse vector
Matrix<double, General, RowSparse> B(10, 10);
Vector<double, VectSparse> row_sparse;

GetRow(B, 0, row_sparse);
\endprecode


<h4>Location :</h4>
<p> Functions.cxx</p>



<div class="separator"><a name="SetCol"></a></div>



<h3>SetCol</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void SetCol(const Vector&amp;, int, Matrix&amp;);
</pre>


<p>This function modifies a column in the provided matrix. For sparse matrices, the expected vector is sparse.</p>


<h4> Example : </h4>
\precode
Matrix<double> A(5, 5);
A.Fill();

// now you construct a column
Vector<double> col(5);
col.FillRand();

// and you put it in A
int icol = 1;
SetCol(col, icol, A);

// For sparse matrices the column is sparse
Matrix<double, General, ArrayRowSparse> B(10, 10);
Vector<double, VectSparse> col_sparse(2);
col_sparse.Index(0) = 2; col_sparse.Value(0) = 1.2;
col_sparse.Index(1) = 7; col_sparse.Value(1) = 2.4;

// setting a column of B
SetCol(col_sparse, icol, B);

\endprecode


<h4>Location :</h4>
<p>Functions.cxx</p>



<div class="separator"><a name="GetCol"></a></div>



<h3>GetCol</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void GetCol(const Matrix&amp;, int, Vector&amp;);
</pre>


<p>This function extracts a column from the provided matrix. For sparse matrices, the extracted vector is
 a sparse vector. </p>


<h4> Example : </h4>
\precode
Matrix<double> A(5, 5);
A.Fill();

// now you extract the first column
Vector<double> col;
GetCol(A, 0, col);

// For sparse matrices, declare a sparse vector
Matrix<double, General, RowSparse> B(10, 10);
Vector<double, VectSparse> col_sparse;

GetCol(B, 0, col_sparse);

\endprecode


<h4>Location :</h4>
<p>Functions.cxx</p>



<div class="separator"><a name="MaxAbs"></a></div>



<h3>MaxAbs</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  T MaxAbs(const Matrix&lt;T&gt;&amp;);
</pre>


<p>This function returns the highest absolute value of a matrix.</p>


<h4> Example : </h4>
\precode
Matrix<complex<double> > A(5, 5);
A.Fill();

double module_max = MaxAbs(A);
\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="Norm1"></a></div>



<h3>Norm1</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  T Norm1(const Matrix&lt;T&gt;&amp;);
</pre>


<p>This function returns the 1-norm of a matrix.</p>


<h4> Example : </h4>
\precode
Matrix<complex<double> > A(5, 5);
A.Fill();

double anorm_one = Norm1(A);
\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="NormInf"></a></div>



<h3>NormInf</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  T NormInf(const Matrix&lt;T&gt;&amp;);
</pre>


<p>This function returns the infinity-norm of a matrix.</p>


<h4> Example : </h4>
\precode
Matrix<complex<double> > A(5, 5);
A.Fill();

double anorm_inf = NormInf(A);
\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="ApplyPermutation"></a></div>



<h3>ApplyInversePermutation</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ApplyPermutation(Matrix&amp;, const Vector&lt;int&gt;&amp;, const Vector&lt;int&gt;&amp;);
  void ApplyInversePermutation(Matrix&amp;, const Vector&lt;int&gt;&amp;, const Vector&lt;int&gt;&amp;);
</pre>


<p>This function permutes a given matrix with the provided new row numbers and column numbers. <code>ApplyInversePermutation(A, row, col)</code> does the same operation as <code>A(row, col) = A</code> in Matlab, whereas <code>ApplyPermutation</code> is similar to <code>A = A(row, col)</code>. </p>


<h4> Example : </h4>
\precode
// you fill A as you wish
Matrix<double, Symmetric, ArrayRowSymSparse> A(5, 5);
// then new row and column numbers
IVect row(5);
// for symmetric matrix,
// only second argument is actually used for the permutation
// of both rows and columns in order to preserve symmetry
ApplyInversePermutation(A, row, row);

// for unsymmetric matrices, you can specify different permutations
IVect col(5);
Matrix<double, General, ArrayRowSparse> B(5, 5);
ApplyInversePermutation(B, row, col);

// reciprocal operation
ApplyPermutation(B, row, col);
\endprecode


<h4>Location :</h4>
<p>Permutation_ScalingMatrix.cxx</p>



<div class="separator"><a name="ScaleMatrix"></a></div>



<h3>ScaleMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ScaleMatrix(Matrix&amp;, const Vector&amp; L, const Vector&amp; R);
</pre>


<p>This function multiplies each row and column with a coefficient, i.e. <code>A</code> is replaced by <code>L*A*R</code> where <code>L</code> and <code>R</code> are diagonal matrices and you provide the diagonal when you call <code>ScaleMatrix</code>. </p>


<h4> Example : </h4>
\precode
// you fill A as you wish
Matrix<double, Symmetric, ArrayRowSymSparse> A(5, 5);
// then scaling vectors
Vector<double> scale(5);
// for symmetric matrix, row and column scaling must be the same
// if you want to keep symmetry
ScaleMatrix(A, scale, scale);

// for unsymmetric matrices, you can specify different scalings
Vector<double> scale_right(5);
Matrix<double, General, ArrayRowSparse> B(5, 5);
ScaleMatrix(B, scale, scale_right);
\endprecode


<h4>Location :</h4>
<p>Permutation_ScalingMatrix.cxx</p>



<div class="separator"><a name="ScaleLeftMatrix"></a></div>



<h3>ScaleLeftMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ScaleLeftMatrix(Matrix&amp;, const Vector&amp; L);
</pre>


<p>This function multiplies each row with a coefficient, i.e. <code>A</code> is replaced by <code>L*A</code> where <code>L</code> is diagonal and you provide the diagonal when you call <code>ScaleLeftMatrix</code>. This function is not available for symmetric matrices since this operation would break the symmetry.</p>


<h4> Example : </h4>
\precode
// you fill A as you wish
Matrix<double, General, ArrayRowSparse> A(5, 5);
// then scaling vector
Vector<double> scale(5);
ScaleLeftMatrix(A, scale);
\endprecode


<h4>Location :</h4>
<p>Permutation_ScalingMatrix.cxx</p>



<div class="separator"><a name="ScaleRightMatrix"></a></div>



<h3>ScaleLeftMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ScaleRightMatrix(Matrix&amp;, const Vector&amp; R);
</pre>


<p>This function multiplies each column with a coefficient, i.e. <code>A</code> is replaced by <code>A*R</code> where <code>R</code> is diagonal and you provide the diagonal when you call <code>ScaleRightMatrix</code>. This function is not available for symmetric matrices since this operation would break the symmetry.</p>


<h4> Example : </h4>
\precode
// you fill A as you wish
Matrix<double, General, ArrayRowSparse> A(5, 5);
// then scaling vector
Vector<double> scale(5);
ScaleRightMatrix(A, scale);
\endprecode


<h4>Location :</h4>
<p>Permutation_ScalingMatrix.cxx</p>



<div class="separator"><a name="Copy"></a></div>



<h3>Copy</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Copy(const Matrix&, Matrix2&);
</pre>


<p>This function copies a sparse matrix into another one. If the types of the matrices
 differ, a conversion is performed. However, not all the conversion have been implemented,
 so you may have a compilation error when copying some matrices. </p>


<h4> Example : </h4>
\precode
// you fill A as you wish
Matrix<double, General, ArrayRowSparse> A(5, 5);

// then you can copy it to another form
Matrix<double, General, RowSparse> B;

// B does not need to be allocated
Copy(A, B);

// For other types that don't compile
// you can use ConvertMatrix_to_Coordinates :
Matrix<double, Symmetric, ColSymSparse> C;
// conversion to triplet form (i, j, value)
IVect IndRow, IndCol;
Vector<double> Val;
ConvertMatrix_to_Coordinates(A, IndRow, IndCol, Val, 0, true);
// then C is filled
ConvertMatrix_from_Coordinates(IndRow, IndCol, Val, C, 0);

\endprecode


<h4>Location :</h4>
<p>Matrix_Conversions.cxx</p>



<div class="separator"><a name="ConvertMatrix_to_Coordinates"></a></div>



<h3>ConvertMatrix_to_Coordinates</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ConvertMatrix_to_Coordinates(const Matrix& A, Vector<int>& IndRow, Vector<int>& IndCol, Vector<T>& Val, int index, bool sym);
</pre>


<p>This function converts a sparse matrix to the triplet form (i, j, val) (coordinate format). The row and column numbers will start at index, therefore you can switch between 1-based indices and 0-based indices.  </p>


<h4> Example : </h4>

\precode
// you fill A as you wish
Matrix<double, General, ArrayRowSparse> A(5, 5);

// conversion to triplet form (i, j, value)
IVect IndRow, IndCol;
Vector<double> Val;
ConvertMatrix_to_Coordinates(A, IndRow, IndCol, Val, 0, true);
// number of non-zero entries :
int nnz = IndRow.GetM();

for (int i = 0; i < nnz; i++)
  {
    cout << "Row index : " << IndRow(i) << endl;
    cout << "Column index : " << IndCol(i) << endl;
    cout << "value : " << Val(i) << endl;
  }
\endprecode


<h4>Location :</h4>
<p>Matrix_Conversions.cxx</p>



<div class="separator"><a name="ConvertMatrix_from_Coordinates"></a></div>



<h3>ConvertMatrix_from_Coordinates</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ConvertMatrix_from_Coordinates(Vector<int>& IndRow, Vector<int>& IndCol, Vector<T>& Val, Matrix& A, int index);
</pre>


<p>This function converts a triplet form (i, j, val) (coordinate format) to a sparse matrix. The row and column numbers are assumed to start at index, therefore you can switch between 1-based indices and 0-based indices.  </p>


<h4> Example : </h4>

\precode
// creating a sparse matrix
// A = | 1    0   0   2|
//     | -1   2   3   0|
//     |  0  1.2  0  2.5|
int nnz = 7;
IVect IndRow(nnz), IndCol(nnz);
Vector<double> Val(nnz);
IndRow(0) = 0; IndCol(0) = 0; Val(0) = 1.0;
IndRow(1) = 0; IndCol(1) = 3; Val(1) = 2.0;
IndRow(2) = 1; IndCol(2) = 0; Val(2) = -1.0;
IndRow(3) = 1; IndCol(3) = 1; Val(3) = 2.0;
IndRow(4) = 1; IndCol(4) = 2; Val(4) = 3.0;
IndRow(5) = 2; IndCol(5) = 1; Val(5) = 1.2;
IndRow(6) = 2; IndCol(6) = 3; Val(6) = 2.5;

// conversion to a Seldon structure
Matrix<double, General, RowSparse>
ConvertMatrix_from_Coordinates(IndRow, IndCol, Val, A, 0);

\endprecode


<h4>Location :</h4>
<p>Matrix_Conversions.cxx</p>



<div class="separator"><a name="ConvertToCSC"></a></div>



<h3>ConvertToCSC</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ConvertToCSC(const Matrix& A, Property& sym, Vector<int>& Ptr, Vector<int>& Ind, Vector<T>& Val, bool sym_pat);
</pre>


<p>This function converts a matrix to Compressed Sparse Column (CSC) format. Val stores the values
 of non-zero entries, Ind the row indexes of the non-zero entries, and Ptr the locations in Val of non-zero
 entries starting a column. This is the storage represented by ColSparse in Seldon. If Property is Symmetric,
 only upper part of the matrix will be converted (ColSymSparse storage). If sym_pat is true, the sparsity pattern
 is symmetrized, that is to say that if a(i, j) exists, then a(j, i) also exists. Default value of sym_pat is false. 
This feature is used for exemple in the interface of Pastix solver, since this solver requires that the sparsity pattern
  is symmetric (values may be not symmetric). </p>


<h4> Example : </h4>

\precode

// you fill A as you wish
Matrix<double, General, ArrayRowSparse> A(5, 5);

// then you can retrieve Ptr, Ind, Val arrays of CSC format
General prop;
IVect Ptr, Ind;
Vector<double> Val;
ConvertToCSC(A, prop, Ptr, Ind, Val);

\endprecode



<div class="separator"><a name="ConvertToCSR"></a></div>



<h3>ConvertToCSR</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ConvertToCSR(const Matrix& A, Property& sym, Vector<int>& Ptr, Vector<int>& Ind, Vector<T>& Val);
</pre>


<p>This function converts a matrix to Compressed Sparse Row (CSR) format. Val stores the values
 of non-zero entries, Ind the column indexes of the non-zero entries, and Ptr the locations in Val of non-zero
 entries starting a row. This is the storage represented by RowSparse in Seldon. If Property is Symmetric,
 only upper part of the matrix will be converted (RowSymSparse storage). </p>


<h4> Example : </h4>

\precode

// you fill A as you wish
Matrix<double, General, ArrayColSparse> A(5, 5);

// then you can retrieve Ptr, Ind, Val arrays of CSR format
General prop;
IVect Ptr, Ind;
Vector<double> Val;
ConvertToCSR(A, prop, Ptr, Ind, Val);

\endprecode


<h4>Location :</h4>
<p>Matrix_Conversions.cxx</p>



<div class="separator"><a name="GetSymmetricPattern"></a></div>



<h3>GetSymmetricPattern</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void GetSymmetricPattern(const Matrix& A, Vector<int>& Ptr, Vector<int>& Ind);
</pre>


<p>This function extracts the profile of a given matrix. The pattern is stored in Compressed Sparse Row (CSR) format. Ind stores the column indexes of the non-zero entries, and Ptr the index of starting entries of a row. </p>


<h4> Example : </h4>

\precode

// you fill A as you wish
Matrix<double, General, ArrayColSparse> A(5, 5);

// then you can retrieve Ptr, Ind arrays of CSR format
// profile is symmetrized if needed
IVect Ptr, Ind;
GetSymmetricPattern(A, Ptr, Ind);

\endprecode


<h4>Location :</h4>
<p>Matrix_Conversions.cxx</p>



<div class="separator"><a name="ConvertToSparse"></a></div>



<h3>ConvertToSparse</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ConvertToSparse(const Matrix& A, Matrix& B, const T& threshold);
</pre>


<p>This function converts a dense matrix to a sparse matrix. All values whose modulus is below or equal to threshold are skipped. </p>


<h4> Example : </h4>

\precode

// you fill A as you wish
Matrix<double, General, RowMajor> A(5, 5);

// then you can convert it to a sparse matrix
Matrix<double, General, RowSparse> B;
ConvertToSparse(A, B, 1e-12);

// and retrieve the number of non-zero entries
int nnz = B.GetDataSize();

\endprecode


<h4>Location :</h4>
<p>Matrix_Conversions.cxx</p>



<div class="separator"><a name="Gauss"></a></div>



<h3>Gauss</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Gauss(A, b);
</pre>


<p>This function overwrites b with the solution of A x = b by performing Gauss algorithm. This basic method is only implemented for dense matrices
 and without partial pivoting. It is probably to use <a href="functions_lapack.php#GetLU">GetLU</a> or <a href="functions_lapack.php#GetLU">GetAndSolveLU</a>. </p>


<h4> Example : </h4>

\precode

// you fill A as you wish
Matrix<double, General, RowMajor> A(5, 5);
A.FillRand();

// forming the right hand side
Vector<double> b(5);
b.FillRand();

// then computation of the solution of A x = b
// A is modified during the operation
Vector<double> x(b);
Gauss(A, x);

\endprecode


<h4>Location :</h4>
<p>Functions_MatVect.cxx</p>



<div class="separator"><a name="GaussSeidel"></a></div>



<h3>GaussSeidel</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void GaussSeidel(A, x, b, nb_iterations);
  void GaussSeidel(A, x, b, nb_iterations, int type_algo);
</pre>


<p>This function overwrites b with an approximate solution of A x = b by performing nb_iterations Gauss-Seidel steps. This basic method is only implemented for dense matrices.
 For sparse matrices, you can use <a href="iterative.php#SOR">SOR</a> function by choosing a relaxation parameter equal to one. If type_algo is equal to 0, a forward sweep is followed
 by a backward sweep (so that the associated operator is symmetric) for each iteration. If type_algo is equal to 2, only forward sweeps are applied, and if type_algo is equal to 3, only
 backward sweeps are applied. The default value of type_algo is equal to 2.  </p>


<h4> Example : </h4>

\precode

// you fill A as you wish
Matrix<double, General, RowMajor> A(5, 5);
A.FillRand();

// forming the right hand side
Vector<double> b(5);
b.FillRand();

// then computation of the solution of A x = b
// with Gauss-Seidel algorithm
Vector<double> x(5);
x.Zero();
int nb_iterations = 100;
GaussSeidel(A, x, b, nb_iterations, 0);

\endprecode


<h4>Location :</h4>
<p>Functions_MatVect.cxx</p>



<div class="separator"><a name="IsComplexMatrix"></a></div>



<h3>IsComplexMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void IsComplexMatrix(const Matrix&)
</pre>


<p>This function returns true if the matrix is complex. It does not check 
 if all the values are real, but merely returns true if the value type is complex (e.g. T = complex<double>). </p>


<h4> Example : </h4>

\precode

// complex matrix
Matrix<complex<double>, General, RowMajor> A;

// IsComplexMatrix should return true
if (IsComplexMatrix(A))
  { 
    cout << "A is complex" << endl;
  }

\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="IsSymmetricMatrix"></a></div>

 

<h3>IsSymmetricMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void IsSymmetricMatrix(const Matrix&)
</pre>


<p>This function returns true if the matrix is symmetric. It does not check 
 if a(i,j) = a(j,i) for all i and j, but merely returns true if the property of the matrix
 is set to symmetric. </p>


<h4> Example : </h4>

\precode

// complex matrix
Matrix<complex<double>, Symmetric, RowSymPacked> A;

// IsSymmetricMatrix should return true
if (IsSymmetricMatrix(A))
  { 
    cout << "A is symmetric" << endl;
  }

\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="GetLowerTriangular"></a></div>

 

<h3>GetLowerTriangular</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void GetLowerTriangular(const Matrix&, Matrix&)
</pre>


<p>This function extracts the lower part of a matrix, this function is implemented only for dense storages. </p>


<h4> Example : </h4>

\precode

// dense matrix
int n = 6;
Matrix<complex<double>, General, RowMajor> A(n, n);

A.FillRand();

Matrix<complex<double>, General, RowMajor> L;
// equivalent Matlab function L = tril(A)
GetLowerTriangular(A, L);

\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="GetUpperTriangular"></a></div>

 

<h3>GetUpperTriangular</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void GetUpperTriangular(const Matrix&, Matrix&)
</pre>


<p>This function extracts the upper part of a matrix, this function is implemented only for dense storages. </p>


<h4> Example : </h4>

\precode

// dense matrix
int n = 6;
Matrix<complex<double>, General, RowMajor> A(n, n);

A.FillRand();

Matrix<complex<double>, General, RowMajor> U;
// equivalent Matlab function U = triu(A)
GetUpperTriangular(A, U);

\endprecode


<h4>Location :</h4>
<p>Functions_Matrix.cxx</p>



<div class="separator"><a name="ReadCoordinateMatrix"></a></div>

 

<h3>ReadCoordinateMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void ReadCoordinateMatrix(istream& file_stream, Vector<int>& rows, Vector<int>& cols, Vector<T>& values, bool cplx)
</pre>


<p>This function reads a sparse matrix from a file. The file is expected to look like : </p>

<pre class="fragment">
1  1  0.545432
1  3  -0.4349
1  7  33.42343
2  1  -8.43321
2  4  0.987987
</pre>

<p>The sparse matrix is stored in coordinate format, with the three arrays rows, col, vals, respctively the row indexes, column indexes and the values, that will be equal for this file : </p>

<pre class="fragment">
rows = [1, 1, 1, 2, 2]
cols = [1, 3, 7, 1, 4]
values = [0.545432, -0.4349, 33.42343, -8.43321, 0.987987]
</pre>

<p> If you know already the number of non-zero entries, it is better to allocate these arrays before calling ReadCoordinateMatrix. If cplx is equal to true, a complex matrix is expected to be stored in the following file </p>

<pre class="fragment">
1  1  0.545432  0.0
1  3  -0.4349   -1.23
1  7  33.42343  34.211
2  1  -8.43321  0.0113
2  4  0.987987  0.0
</pre>

<h4> Example : </h4>

\precode

// sparse matrix in coordinate format
Vector<int> rows, cols;
Vector<double> values;

// initializing this matrix by reading it in a file
// first line of the file contains m, n, nnz
int m, n, nnz;
ifstream file_in("mat.dat");
if (!file_in.good())
  cout << "File does not exist" << endk;

file_in >> m >> n >> nnz;
rows.Reallocate(nnz);
cols.Reallocate(nnz);
values.Reallocate(nnz);
ReadCoordinateMatrix(file_in, rows, col, values);

file_in.close();

\endprecode


<h4>Location :</h4>
<p>Matrix_Sparse.cxx</p>



<div class="separator"><a name="WriteCoordinateMatrix"></a></div>

 

<h3>WriteCoordinateMatrix</h3>


<h4>Syntax :</h4>
 <pre class="syntax-box">
  void WriteCoordinateMatrix(ostream& file_stream, const Vector<int>& rows, const Vector<int>& cols, const Vector<T>& values, bool cplx)
</pre>


<p>This function writes a sparse matrix in a file. If we have taken the following arguments </p>

<pre class="fragment">
rows = [1, 1, 1, 2, 2]
cols = [1, 3, 7, 1, 4]
values = [0.545432, -0.4349, 33.42343, -8.43321, 0.987987]
</pre>

<p> The file will look like : </p>

<pre class="fragment">
1  1  0.545432
1  3  -0.4349
1  7  33.42343
2  1  -8.43321
2  4  0.987987
</pre>

<p>If cplx is equal to true, the values of a complex matrix will be stored with two separated columns for the real and imaginary part (no parenthesis). </p>


<h4> Example : </h4>

\precode

// sparse matrix in coordinate format
Vector<int> rows, cols;
Vector<double> values;

// initializaing those arrays
int m = 6, n, 8, nnz = 20;
rows.Reallocate(nnz); cols.Reallocate(nnz);
values.Reallocate(nnz);

ofstream file_out("mat.dat");
// writing m, n, nnz
file_out << m << " " << n << " " << nnz << endl;
// then writing triplets i, j, val
WriteCoordinateMatrix(file_out, rows, col, values);
file_out.close();


\endprecode


<h4>Location :</h4>
<p>Matrix_Sparse.cxx</p>

*/

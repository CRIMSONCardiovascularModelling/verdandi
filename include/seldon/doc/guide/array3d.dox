/*! \file array3d.dox
    \brief 3D Arrays.
*/

/*!
\page array3d 3D Arrays

<h2>Definition</h2>

<p> 3D arrays are instances of the class <code>Array3D</code>. Class <code>Array3D</code> is a template class: <code>Array3D&lt;T, Allocator&gt;</code>. As for vectors, <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>). <code>Allocator</code> defines the way memory is managed. It is close to STL allocators. See the section "Allocators" for further details.  </p>

<h2>Declaration</h2>

<p> There is a default <code>Allocator</code> (see the section "Allocators"). It means that the last template parameter may be omitted. Then a 3D array of integers may be declared thanks to the line: </p>

\precode Array3D<int> A;\endprecode

<p> This defines an array of size 0 x 0 x 0, that is to say an empty array. To define a 3D array of size 5 x 3 x 6, one may write: </p>

\precode Array3D<int> A(5, 3, 6);\endprecode

<h2>Use of 3D arrays</h2>

<p> Only a few methods are available for 3D arrays because they are not the main concern of %Seldon. Mainly, the access to elements is achieved through the <code>operator(int, int, int)</code>, and indices start at 0: </p>

\precode
Array3D<double> A(5, 6, 3);
A(0, 1, 3) = -3.1;
A(0, 0, 5) = 1.2 * A(0, 1, 3);
\endprecode

<p> One may point out some methods:</p>

<ul>

  <li> <code>GetLength1()</code>, <code>GetLength2()</code> and <code>GetLength3()</code> return lengths in dimensions #1, #2 and #3.</li>
  
  <li> <code>Fill</code> fills with 0, 1, 2, 3, etc. or fills the array with a given value.</li>
  
  <li> <code>Reallocate</code> resizes the array (warning, data may be lost, depending on the allocator).</li>
  
  <li> <code>Copy</code> enables to duplicate an array.</li>
  
</ul>

<p> A comprehensive test of this class is done in file <code>test/program/array3d_test.cpp</code>. In the table below, we have listed the method of this class </p>

<table class="category-table">
<tr class="category-table-tr-2">
<td class="category-table-td"> <a href="#constructor"> constructors </a> </td> <td></td></tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#operator"> operators </a> </td> <td></td></tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#GetLength1"> GetLength1 </a> </td>
 <td class="category-table-td"> returns the first dimension of the 3-D array </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#GetLength2"> GetLength2 </a> </td>
 <td class="category-table-td"> returns the second dimension of the 3-D array </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#GetLength3"> GetLength3 </a> </td>
 <td class="category-table-td"> returns the third dimension of the 3-D array </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#GetSize"> GetSize </a> </td>
 <td class="category-table-td"> returns the number of elements stored in the 3-D array</td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#GetSize"> GetDataSize </a> </td>
 <td class="category-table-td"> returns the number of elements stored in the 3-D array </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#GetData"> GetData </a> </td>
 <td class="category-table-td"> returns the pointer to the elements stored in the 3-D array </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#GetDataPointer"> GetDataPointer </a> </td>
 <td class="category-table-td"> returns a pointer to A(i, j, k) </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#Reallocate"> Reallocate </a> </td>
 <td class="category-table-td"> modifies the size of the 3-D array </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#SetData"> SetData </a> </td>
 <td class="category-table-td"> sets the pointer storing the 3-D array </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#Nullify"> Nullify </a> </td>
 <td class="category-table-td"> sets the pointer to zero without releasing memory </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#Clear"> Clear </a> </td>
 <td class="category-table-td"> removes all elements of the 3-D array</td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#Copy"> Copy </a> </td>
 <td class="category-table-td"> copies a 3-D array </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#Fill"> Fill </a> </td>
 <td class="category-table-td"> sets elements to 0, 1, 2, etc or to a given value </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#Zero"> Zero </a> </td>
 <td class="category-table-td"> sets all the elements to 0 </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#FillRand"> FillRand </a> </td>
 <td class="category-table-td"> sets randomly elements of the 3-D array </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#Print"> Print </a> </td>
 <td class="category-table-td"> displays the 3-D array </td> </tr>
<tr class="category-table-tr-2">
 <td class="category-table-td"> <a href="#Write"> Write </a> </td>
 <td class="category-table-td"> writes the 3-D array in a binary file </td> </tr>
<tr class="category-table-tr-1">
 <td class="category-table-td"> <a href="#Read"> Read </a> </td>
 <td class="category-table-td"> reads the 3-D array from a binary file</td> </tr>
</table>



<div class="separator"><a name="constructor"></a></div>



<h3>constructors of Array3D</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  Array3D(int i, int j, int k)
</pre>

<p>You can use a constructor with the dimensions of the 3-D array. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A, B(5, 6, 3);
// then you can modify entries of B
B(2, 0, 4) = 2.5;

// you can use a copy constructor
Array3D<double> C(B);

\endprecode


<h4>Related topics : </h4>
<p><a href="#Reallocate">Reallocate</a><br/>
<a href="#operator">operator =</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="operator"></a></div>



<h3>Operators of Array3D</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  operator ()(int i, int j, int k)
  operator = (const Array3D<T>& )
</pre>

<p>The access operator () can be used to modify A(i, j, k). </p> 

<h4> Example : </h4>
\precode
Array3D<double> A, B(5, 6, 3);
// then you can modify entries of B
B(2, 0, 4) = 2.5;

// you can use a copy constructor
Array3D<double> C(B);

// or operator =
C = B;

\endprecode


<h4>Related topics : </h4>
<p><a href="#Reallocate">Reallocate</a><br/>
<a href="#Copy">Copy</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="GetLength1"></a></div>



<h3>GetLength1</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  int GetLength1() const
</pre>

<p>This method returns the first dimension of the 3-D array. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A, B(5, 6, 3);
// GetLength1() should return 5
cout << "First dimension of B " << B.GetLength1() << endl;
\endprecode


<h4>Related topics : </h4>
<p><a href="#Reallocate">Reallocate</a><br/>
<a href="#GetSize">GetSize</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="GetLength2"></a></div>



<h3>GetLength2</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  int GetLength2() const
</pre>

<p>This method returns the second dimension of the 3-D array. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A, B(5, 6, 3);
// GetLength2() should return 6
cout << "Second dimension of B " << B.GetLength2() << endl;
\endprecode


<h4>Related topics : </h4>
<p><a href="#Reallocate">Reallocate</a><br/>
<a href="#GetSize">GetSize</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="GetLength3"></a></div>



<h3>GetLength3</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  int GetLength3() const
</pre>

<p>This method returns the third dimension of the 3-D array. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A, B(5, 6, 3);
// GetLength3() should return 3
cout << "Third dimension of B " << B.GetLength3() << endl;
\endprecode


<h4>Related topics : </h4>
<p><a href="#Reallocate">Reallocate</a><br/>
<a href="#GetSize">GetSize</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="GetSize"></a></div>



<h3>GetSize, GetDataSize</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  int GetSize() const
  int GetDataSize() const
</pre>

<p>This method returns the number of element effectively stored in the 3-D array. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A, B(5, 6, 3);
// GetSize() should return 5*6*3 = 90
cout << "Number of elements of B " << B.GetSize() << endl;
\endprecode


<h4>Related topics : </h4>
<p><a href="#Reallocate">Reallocate</a><br/>
<a href="#GetLength1">GetLength1</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="GetData"></a></div>



<h3>GetData</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  T* GetData() const
</pre>

<p>This method returns the pointer to the array storing all the elements. This method
 is a low-level routine and should be used cautiously. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A(5, 6, 3);
// If you wish to manipulate the vector containing all the elements of A :
Vector<double> V;
V.SetData(A.GetSize(), A.GetData());

// to avoid segmentation fault
V.Nullify();
\endprecode


<h4>Related topics : </h4>
<p><a href="#SetData">SetData</a><br/>
<a href="#Nullify">Nullify</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="GetDataPointer"></a></div>



<h3>GetDataPointer</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  T* GetDataPointer(int i, int j, int k) const
</pre>

<p>This method is equivalent to &amp;A(i, j, k) </p> 

<h4> Example : </h4>
\precode
Array3D<double> A(5, 6, 3);
// If you wish to manipule a sub-matrix of A
Matrix<double> A;
A.SetData(6, 3, A.GetDataPointer(1, 0, 0));
// you could also write &A(1, 0, 0)

// to avoid segmentation fault
A.Nullify();
\endprecode


<h4>Related topics : </h4>
<p><a href="#SetData">SetData</a><br/>
<a href="#Nullify">Nullify</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Reallocate"></a></div>



<h3>Reallocate</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Reallocate(int i, int j, int k);
</pre>

<p>This method resizes the 3-D array with the new dimensions given in argument.
 If NewAlloc is used, the previous elements are lost, whereas they are kept if you are using MallocAlloc or CallocAlloc allocator. </p> 

<h4> Example : </h4>
\precode
Array3D<double> A(5, 6, 3);
A.Fill();

// then changing the size of A
A.Reallocate(7, 2, 5);

\endprecode


<h4>Related topics : </h4>
<p><a href="#SetData">SetData</a><br/>
<a href="#Nullify">Nullify</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="SetData"></a></div>



<h3>SetData</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void SetData(int i, int j, int k, T* data);
</pre>

<p>This method initializes the pointer to the 3-D array. This low-level method should be used carefully. </p> 

<h4> Example : </h4>
\precode
// dealing with a vector
int m = 10, n = 4, p = 7;
Vector<double> V(m*n*p);

// manipulating the vector
V.Fill();

// then you can reshape the vector into a 3-D array
A.SetData(m, n, p, V.GetData());
V.Nullify();

A(3, 1, 2) = 1.5;

\endprecode


<h4>Related topics : </h4>
<p><a href="#constructor">constructor</a><br/>
<a href="#Nullify">Nullify</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Nullify"></a></div>



<h3>Nullify</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Nullify()
</pre>

<p>This method clears the 3-D array without releasing the memory. This low-level method should be used cautiously </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 10, n = 4, p = 7;
Array3D<double> A(m, n, p);

// filling A
A(2, 0, 0) = 1.2;
// ...

// then reshaping it to a vector
Vector<double> V;
V.SetData(A.GetSize(), A.GetData());

// Nullify is called to avoid multiple deallocations
A.Nullify();

\endprecode


<h4>Related topics : </h4>
<p><a href="#SetData">SetData</a><br/>
<a href="#Clear">Clear</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Clear"></a></div>



<h3>Clear</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Clear()
</pre>

<p>This method clears the 3-D array. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 10, n = 4, p = 7;
Array3D<double> A(m, n, p);

// filling A
A(2, 0, 0) = 1.2;
// ...

// if you want to free the memory for other computations
A.Clear();

\endprecode


<h4>Related topics : </h4>
<p><a href="#SetData">SetData</a><br/>
<a href="#Reallocate">Reallocate</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Copy"></a></div>



<h3>Copy</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Copy(const Array3D&lt;T&gt;&amp; )
</pre>

<p>This method copies a 3-D array into the current object. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 10, n = 4, p = 7;
Array3D<double> A(m, n, p);
// filling A


// then you can copy this 3-D array into B
// you could also use operator =
Array3D<double> B;
B.Copy(A);

\endprecode


<h4>Related topics : </h4>
<p><a href="#operator">operator</a><br/>
<a href="#constructor">constructor</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Fill"></a></div>



<h3>Fill</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Fill()
  void Fill(const T& x)
</pre>

<p>This method fills the 3-D array with 0, 1, 2, ... or with a given value. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 3, n = 2, p = 4;
Array3D<double> A(m, n, p);
// filling A with 0, 1, 2, ...
A.Fill();
// A should be equal to
// A(0, :, :) = |0, 1, 2, 3|
//              |4, 5, 6, 7|
// A(1, :, :) = |8, 9, 10, 11|
//              |12, 13, 14, 15|
// A(2, :, :) = |16, 17, 18, 19|
//              |20, 21, 22, 23|



// you can also set all the entries to a same value
A.Fill(1.0);
// A should be equal to
// A(0, :, :) = |1, 1, 1, 1|
//              |1, 1, 1, 1|
// A(1, :, :) = |1, 1, 1, 1|
//              |1, 1, 1, 1|
// A(2, :, :) = |1, 1, 1, 1|
//              |1, 1, 1, 1|

\endprecode


<h4>Related topics : </h4>
<p><a href="#Zero">Zero</a><br/>
<a href="#FillRand">FillRand</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Zero"></a></div>



<h3>Zero</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Zero()
</pre>

<p>This method initializes all the entries to 0. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 3, n = 2, p = 4;
Array3D<double> A(m, n, p);
// A is not initialized, for example you could set all
// the values to 0
A.Zero();

\endprecode


<h4>Related topics : </h4>
<p><a href="#Fill">Fill</a><br/>
<a href="#FillRand">FillRand</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="FillRand"></a></div>



<h3>FillRand</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void FillRand()
</pre>

<p>This method fills the 3-D array with random values. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 3, n = 2, p = 4;
Array3D<double> A(m, n, p);
// A is not initialized, for example you could set 
// randomly the values
A.FillRand();

\endprecode


<h4>Related topics : </h4>
<p><a href="#Fill">Fill</a><br/>
<a href="#Zero">Zero</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Print"></a></div>



<h3>Print</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Print()
</pre>

<p>This method displays the 3-D array. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 3, n = 2, p = 4;
Array3D<double> A(m, n, p);
A.FillRand();

cout << "A = " << endl;
A.Print();

\endprecode


<h4>Related topics : </h4>
<p><a href="#Fill">Fill</a><br/>
<a href="#Zero">Zero</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Read"></a></div>



<h3>Read</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Read(string file_name);
  void Read(istream& in);
  void Read(string file_name, bool with_size);
  void Read(istream& in, bool with_size);
</pre>

<p>This method reads a 3-D array from a file or an input stream (binary format). If with_size is set to false, the dimensions of the 3-D array are not read in the file. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 3, n = 2, p = 4;
Array3D<double> A(m, n, p), B;
A.FillRand();

// you can write it on a file
A.Write("test.dat");

// then read it
B.Read("test.dat");

\endprecode


<h4>Related topics : </h4>
<p><a href="#Write">Write</a><br/>
<a href="#Reallocate">Reallocate</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>



<div class="separator"><a name="Write"></a></div>



<h3>Write</h3>

<h4>Syntax :</h4>
 <pre class="syntax-box">
  void Write(string file_name);
  void Write(ostream& in);
  void Write(string file_name, bool with_size);
  void Write(ostream& in, bool with_size);
</pre>

<p>This method writes a 3-D array in a file or in an input stream (binary format). If with_size is set to false, the dimensions of the 3-D array are not written in the file. </p> 

<h4> Example : </h4>
\precode
// constructing a 3-D array
int m = 3, n = 2, p = 4;
Array3D<double> A(m, n, p), B;
A.FillRand();

// you can write it on a file
A.Write("test.dat");

// then read it
B.Read("test.dat");

\endprecode


<h4>Related topics : </h4>
<p><a href="#Read">Read</a><br/>
<a href="#Reallocate">Reallocate</a></p>


<h4>Location :</h4>
<p> Class Array3D<br/>
Array3D.hxx Array3D.cxx</p>

*/

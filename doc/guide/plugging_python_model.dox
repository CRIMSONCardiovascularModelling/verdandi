/*! \file plugging_model.dox
    \brief Plugging the Model.
*/

/*!
\page plugging_python_model Plugging a Python model


Start from the \link PythonModelTemplate::PythonModelTemplate PythonModelTemplate\endlink. The complete interface of the model class is described \link PythonModelTemplate::PythonModelTemplate here\endlink. With a complete interface, one can apply any data assimilation method in Verdandi. But for a given data assimilation method, not all methods are required. Use the \link model_requirements Model requirements page\endlink, or the Python script <code>bin/methods_requirements</code> to know precisely which methods you will need to implement in your model.

<ul>

<li>
The Python model interface requires the use of <a href="http://numpy.scipy.org/">Numpy</a>, a package for scientific computing in Python. You will need to install it (and its headers).

Under Windows, you may need to include manually the path to Numpy headers. You would then add the following line in the SConstruct file:

\precode
include_path = "numpy_path"
\endprecode

where <code>numpy_path</code> should be replaced with the directory containing Numpy headers. This line must be inserted before the <code>execfile</code> statement.
</li>

<li>
In the model directory, copy the \link PythonModelTemplate::PythonModelTemplate PythonModelTemplate\endlink and rename it to \"MyModel\". E.g., under Linux or MacOS, in command line:

\precode
$ cd verdandi/model/
$ cp PythonModelTemplate.py MyModel.py
\endprecode

</li>

 <li>
Rename the name of the class to MyModel.

</li>

<li>
In a first step, it is advised to write the interface for the \link Verdandi::ForwardDriver ForwardDriver\endlink method which requires only a limited number of methods to be implemented.

Create a directory <code>my_model</code> in the <code>example</code> directory. Copy in <code>my_model</code> the following files: <code>example/quadratic_model/SConstruct</code>, <code>example/quadratic_model/forward_python.cpp</code> and the configuration file <code>example/quadratic_model/configuration/truth.lua</code>. E.g.:
</li>

\precode
$ cd verdandi/example/
$ mkdir -p my_model/configuration
$ cp quadratic_model/{SConstruct,forward_python.cpp} my_model/
$ cp quadratic_model/configuration/truth.lua my_model/configuration/
\endprecode

<li> In the file <code>my_model/configuration/truth.lua</code>, replace all the values in the <code>python_model</code> section with the corresponding ones on your model: </li>

\precode
python_model = {

   module = "MyModel", -- name of the Python module containing the model class.
   directory = "model/", -- directory where the Python module is located.
   class_name = "MyModel" -- name of the Python model class.

}
\endprecode


<li> Compile the program <code>forward_python.cpp</code>.
</li>

\precode
$ scons forward_python
\endprecode

<li> Run the program.

\precode
$ ./forward_python configuration/truth.lua
\endprecode


  At run time, if a method is needed in the model class, and if this method is not implemented, the program will launch an exception.
  For instance, if the method \link PythonModel::PythonModelTemplate::HasFinished HasFinished\endlink is undefined, an exception will be thrown to report you this error.
  Then, see the contract of this method (\link PythonModelTemplate::PythonModelTemplate::HasFinished HasFinished\endlink) and implement it. You can also have a look into the example models in <code>verdandi/model/</code>.

</li>
</ul>




*/

/*! \file nudging.dox
    \brief Nudging.
*/

/*!
\page nudging Nudging

Verdandi provides a C++ implementation of the nudging.

The nudging is a sequential data assimilation method. It is implemented in <code>Nudging.hxx</code> and <code>Nudging.cxx</code>. The class \link Verdandi::Nudging Nudging\endlink is a template class: <code>Nudging<T, ClassModel, ClassObservationManager></code>. <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>), <code>ClassModel</code> is the type of the model (e.g. <code>QuadraticModel<double></code>), <code>ClassObservationManager</code> is the type of the observation manager (e.g. <code>LinearObservationManager<double></code>).

A simulation with the nudging may be carried out with the following C++ lines:

\precode
Nudging<double,  QuadraticModel<double>,
         LinearObservationManager<double> > driver; [1]

driver.Initialize(argv[1]); [2]

while (!driver.HasFinished()) [6]
{
    driver.InitializeStep(); [3]
    driver.Forward(); [4]
    driver.Analyze(); [5]
}
\endprecode

\comment
  <li> First build the \link Verdandi::Nudging Nudging\endlink driver with the construction \link Verdandi::Nudging::Nudging() Nudging\endlink. </li>

  <li> Then initialize the driver, the model and the observation manager, and read the option keys in the configuration file with the method \link Verdandi::Nudging::Initialize(string configuration_file, bool initialize_model, bool initialize_observation_manager) Initialize(configuration_file)\endlink.</li>

  <li> Optionally initialize a step for the nudging with the method \link Verdandi::Nudging::InitializeStep() InitializeStep()\endlink. This initializes a step for the model. </li>

  <li> Perform a step forward without nudging with the method \link Verdandi::Nudging::Forward() Forward()\endlink. </li>

  <li> Compute the analysis with the method \link Verdandi::Nudging::Analyze() Analyze()\endlink. Whenever observations are available, it corrects the state with the observations. </li>

  <li> Compute the data assimilation until the model has finished: the method \link Verdandi::Nudging::HasFinished() HasFinished()\endlink returns true if the simulation is done, false otherwise. </li>
\endcomment


\section n_algorithm Nudging algorithm

\subsection standard_algorithm Standard algorithm
The nudging method is a sequential data assimilation method. Here is the algorithm: <br>

<ol>
        <li>At time \f$t_0\f$, the initial condition \f$x^{f}_{0}\f$ is available. </li>
        <li>For every time \f$t_h, h \ge 0\f$, 
                - if observations \f$y_h\f$ are available, <br>
                 the analysis takes the nudging value <br>
                 \f$x_h^a = x_h^f + dt * K(y_h - H_h(x_h^f))\f$, <br>
                 and the forecast is <br>
                  \f$x_{h+1}^f = \mathcal{M}_h(x_h^a)\f$;
                - if there are no observations, <br>
                  the forecast is <br>
                  \f$x_{h+1}^f = \mathcal{M}_h(x_h^f)\f$. </li>
</ol>
With: <br>
\f$x_h^f\f$ background state vector; <br>
\f$x_h^a\f$ analysis state vector; <br>
\f$y_h\f$ observation vector; <br>
\f$H_h\f$ linear observation operator that maps the state space to the observation space; <br>
\f$H_h\f$ observation operator linearized at \f$x^f_h\f$; <br>
\f$K\f$ nudging gain matrix; <br>
\f$\mathcal{M}_h\f$ model.

\subsection source_algo Source algorithm

In the source algorithm, the nudging increment \f$ K(y_h - H_h(x_h^f)) \f$ is given to the model which can use it in its time integration.
In this variation most of the work is done in the model (hence by Verdandi user) and the method is essentially a framework coupling the model and the observation manager.


*/

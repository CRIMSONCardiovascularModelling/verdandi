/*! \file linear_algebra.dox
    \brief Linear Algebra Library.
*/

/*!
\page linear_algebra Linear Algebra Library

<li> <a href="doc/linear_algebra_libraries.pdf">A thorough study of existing
libraries for linear algebra</a> has been carried out to choose <a href="http://seldon.sourceforge.net/"> Seldon </a>.


\section seldon_main_strenghts Seldon Main Strengths

<a href="http://seldon.sourceforge.net/">Seldon</a> is adapted to data assimilation problems in large dimension for its following key features:

<ul>
<li> <b>Availability of dense and sparse matrices, vectors</b>

 <a href="http://seldon.sourceforge.net/">Seldon</a> provides many different matrix and vector structures, and many functions for computations (linear algebra).
 Among dense matrices, there are specific structures for rectangular matrices, symmetric matrices, hermitian matrices and triangular matrices. Each type includes several formats. E.g., rectangular dense matrices may be stored by rows or by columns; symmetric dense matrices may be stored as rectangular matrices or only upper part of the matrix is stored (this is the packed form of Blas).</li>

<li> <b>Interface to BLAS and LAPACK</b>

<a href="http://seldon.sourceforge.net/">Seldon</a> is interfaced with <a href="http://www.netlib.org/blas/">Blas</a> (levels 1, 2 and 3) and <a href="http://www.netlib.org/lapack/">Lapack</a>, except for functions involving banded matrices (since this format is not available for the moment). If Blas is not available to the user, a few alternative functions (same functions written in C++) may be used.</li>

<li> <b>Performance</b>

The performance of  <a href="http://seldon.sourceforge.net/">Seldon</a> was evaluated through the Linear Algebra Libraries study.

<center>
\image html bench2.png
\caption Benchmark for Dense Matrix from Claire Mouton, Linear Algebra Libraries (2009).
</center>
</li>

<li> <b>Convenience</b>

<a href="http://seldon.sourceforge.net/">Seldon</a> is designed to be efficient and convenient, which is notably achieved thanks to template classes. Exception handling and several debug levels were define to ease the "coding" development.</li>

<li> <b>Interface to sparse solver libraries</b>

For sparse matrices, Seldon is interfaced with direct solvers of <a href="http://mumps.enseeiht.fr/">MUMPS</a>, <a href="http://crd-legacy.lbl.gov/~xiaoye/SuperLU/">SuperLU</a> and <a href="http://www.cise.ufl.edu/research/sparse/umfpack/">UmfPack</a>. There is a bunch of iterative solvers available in Seldon such as Gmres, BiCgSTAB, Qmr, etc. Thanks to templates, these solvers can be used for any type of matrix and preconditioning, not only Seldon matrices. This is very useful when the user does not store the matrix, but is able to perform a matrix-vector product.</li>

<li> <b>Portability</b>

<a href="http://seldon.sourceforge.net/">Seldon</a> is supposed to be fully compliant with the C++ standard. Therefore, it can be compiled by GNU GCC (>=3.0; tested with version 3.2, 3.3, 3.4, 4.0, 4.1, 4.2, 4.3 and 4.4) and by the Intel C++ compiler icc (tested with icc 7.1 and 8.0). No tests were conducted with proprietary compilers under Unix, but the compliance with the C++ standard should ensure portability. Decent versions of Microsoft Visual C++ (i.e., from Visual C++ 2003) compile Seldon.</li>

<li> <b>Good knowledge of Seldon in Verdandi development team at INRIA</b></li>

<li> <b>Compatibility with distributed matrices and vectors</b>

<a href="http://seldon.sourceforge.net/">Seldon</a> was interfaced with <a href="http://www.mcs.anl.gov/petsc/">PETSc</a> which provides distributed vectors and matrices and many functions for computations. <a href="http://www.mcs.anl.gov/petsc/">PETSc</a> vectors and matrices can be used through the <a href="http://seldon.sourceforge.net/">Seldon</a> objects.
</li>
</ul>

\section seldon_matrices_vector Seldon Matrices and Vectors


The structures manipulated in Verdandi are <a href="http://seldon.sourceforge.net/">Seldon</a> vectors and matrices.

Vectors are instances of the class <code> Vector</code>. <code>Class Vector</code> is a template class: <code> Vector</b><</b>T, Storage, Allocator</b>></b></code>, where

<ul>
<li> <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>). </li>
<li> <code>Storage</code> defines how the vector is stored. <code>Storage</code> is equal to <code>VectFull</code> by default for full vectors, you can set it to <code>VectSparse</code> for sparse vectors.</li>
<li> Finally, <code>Allocator</code> defines the way memory is managed. It is close to STL allocators.</li>
</ul>

Matrices are instances of the class <code> Matrix</code>. <code> Class Matrix</code> is a template class: <code>Matrix</b><</b>T, Prop, Storage, Allocator</b>></b> </code>, where

<ul>
<li> As for vectors, <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>).</li>

<li> <code>Prop</code> indicates that the matrix has given properties (symmetric, hermitian, positive definite or whatever). This template parameter is never used by Seldon; so the user may define its own properties. Thanks to this template parameter, the user may overload some functions based on the properties of the matrix. Seldon defines two properties: <code> General</code> (default) and <code>Symmetric</code>.</li>

<li> <code>Storage</code> defines how the matrix is stored. Matrices may be stored in several ways. <code> RowMajor</code> is the default storage.</li>

<li> Finally, <code>Allocator</code> defines the way memory is managed. It is close to STL allocators. </li>

</ul>


*/
